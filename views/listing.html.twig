{% extends "base.html.twig" %}

{% block title %}{{ path }}{% endblock %}

{% block header %}
    <nav class="current-directory">
        {% for pathPart in pathParts %}
            {% if loop.first %}
                {% set name %}<i class="material-icons">home</i>{% endset %}
            {% else %}
                {% set name = pathPart.name %}
                <span class="current-directory-separator">/</span>
            {% endif %}

            {% if pathPart.href is not empty %}
                <a class="current-directory-part" href="{{ pathPart.href }}">{{ name }}</a>
            {% else %}
                <span class="current-directory-part">{{ name }}</span>
            {% endif %}
        {% endfor %}
    </nav>
{% endblock %}

{% block content %}
    {% if directory.description %}
        <section class="content-text description">
            {{ directory.description }}
        </section>
    {%  endif %}

    {% if directory.empty %}
        <section class="content-alert empty-directory-message">
            There are no items to display.
        </section>
    {% endif %}

    {% if directory.webpages %}
        <section class="list-container list-container-webpages">
            <div class="list-header list-header-webpages">Webpages</div>

            <div class="list list-webpages">
                {% for webpage in directory.webpages %}
                    <a class="list-item list-item-webpage" href="{{ urlGenerator.getUrl(webpage.path) }}">
                        <div class="list-item--name list-item-webpage--name">{{ webpage.name }}</div>
                    </a>
                {% endfor %}
            </div>
        </section>
    {% endif %}

    {% if directory.directories %}
        <section class="list-container list-container-directories">
            <div class="list-header list-header-directories">Directories</div>

            <div class="list list-directories">
                {% for directory in directory.directories %}
                    <a class="list-item list-item-directory" href="{{ urlGenerator.getBrowserUrlFromDataPath(directory.path) }}">
                        <div class="list-item--name list-item-directory--name">{{ directory.name }}</div>
                    </a>
                {% endfor %}
            </div>
        </section>
    {% endif %}

    {% if directory.files %}
        <section class="list-container list-container-files">
            <div class="list-header list-header-files">
                Files

                {% if downloadable %}
                    <div class="list-header-actions">
                        <a class="list-header-action list-header-action--archive-download" title="Download all files">
                            <i class="material-icons">file_download</i>
                        </a>
                        <a class="list-header-action list-header-action--archive-download-wait hidden" title="Cancel download">
                            <i class="material-icons spinner">refresh</i>
                        </a>
                    </div>
                {% endif %}
            </div>

            <div class="list list-files">
                {% for file in directory.files %}
                    <a class="list-item list-item-file" href="{{ urlGenerator.getUrl(file.path) }}">
                        <div class="list-item--name list-item-file--name">{{ file.name }}</div>
                        <div class="list-item--name list-item-file--size">{{ file.size }}</div>
                        <div class="list-item--name list-item-file--modified">{{ file.modified.format("d-m-Y") }}</div>
                    </a>
                {% endfor %}
            </div>
        </section>
    {% endif %}
{% endblock %}

{% block scripts %}
    {% if downloadable %}
        <script>
            var downloadButtons = document.querySelectorAll(".list-header-action--archive-download");
            var downloadWaitButtons = document.querySelectorAll(".list-header-action--archive-download-wait");

            downloadButtons.forEach(function(downloadButton) {
                downloadButton.addEventListener("click", function() {
                    downloadArchive();
                });
            });

            downloadWaitButtons.forEach(function(downloadWaitButton) {
                downloadWaitButton.addEventListener("click", function() {
                    cancelDownload(true);
                });
            });

            var downloadRequest;

            function downloadArchive() {
                // Visual
                downloadButtons.forEach(function(downloadButton2) {
                    downloadButton2.classList.add("hidden");
                });

                downloadWaitButtons.forEach(function(downloadWaitButton) {
                    downloadWaitButton.classList.remove("hidden");
                });

                // Logical
                downloadRequest = new XMLHttpRequest();
                downloadRequest.addEventListener("error", function() {
                    cancelDownload();
                });
                downloadRequest.addEventListener("abort", function() {
                    cancelDownload();
                });
                downloadRequest.addEventListener("load", function() {
                    if (this.status === 200) {
                        var response = JSON.parse(this.response);

                        if (response.archiveUrl) {
                            window.location.href = response.archiveUrl;
                        }
                    }

                    cancelDownload();
                });
                downloadRequest.open("GET", window.location.href.split('?')[0] + "?prepare-download");
                downloadRequest.send();
            }

            function cancelDownload(cancelRequest) {
                // Visual
                downloadWaitButtons.forEach(function(downloadWaitButton2) {
                    downloadWaitButton2.classList.add("hidden");
                });

                downloadButtons.forEach(function(downloadButton) {
                    downloadButton.classList.remove("hidden");
                });

                // Logical
                if (cancelRequest && downloadRequest) {
                    downloadRequest.abort();
                }
            }
        </script>
    {% endif %}
{% endblock %}
